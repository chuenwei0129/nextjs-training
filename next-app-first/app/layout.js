// 1. 导入想要使用的字体
import localFont from 'next/font/local'
import './globals.css'

// 2. 实例化字体对象，设置使用子集等
const geistSans = localFont({
  src: './fonts/GeistVF.woff',
  variable: '--font-geist-sans',
  weight: '100 900',
})
const geistMono = localFont({
  src: './fonts/GeistMonoVF.woff',
  variable: '--font-geist-mono',
  weight: '100 900',
})

export const metadata = {
  title: 'Create Next App',
  description: 'Generated by create next app',
}

// `next/font` 可以通过 CSS 变量的形式与 Tailwind CSS 搭配使用。
// 首先通过 `variable`声明 CSS 变量：
// 然后，将 CSS 变量添加到 Tailwind CSS 配置中：
// 最后，以 `font-` 作为前缀如（`font-ma`、`font-mono`）为元素添加样式：
// 远程字体
import { Ma_Shan_Zheng } from 'next/font/google'
const ma_shan_zheng = Ma_Shan_Zheng({
  subsets: ['latin'],
  display: 'swap',
  weight: '400',
  variable: '--font-ma-shan-zheng',
})

// 默认根布局是服务端组件，且不能设置为客户端组件
// 你可以使用路由组创建多个根布局。
export default function RootLayout({ children }) {
  return (
    // 根布局必须包含 `html` 和 `body`标签，其他布局不能包含这些标签。但如果你要更改这些标签，不推荐直接修改
    // Next.js 提供内置工具帮助你管理诸如 `<title />` 这样的 HTML 元素。
    <html lang="en">
      <body
        //  3. 应用，className 会返回一个只读的 CSS 类名用于加载字体
        className={`${ma_shan_zheng.variable} ${geistSans.variable} ${geistMono.variable} antialiased`}
      >
        {children}
      </body>
    </html>
  )
}

// app/layout.js
// 远程字体
// import { Ma_Shan_Zheng } from 'next/font/google'

// const font = Ma_Shan_Zheng({
//   subsets: ['latin'],
//   weight: '400'
// })

// export default function RootLayout({ children }) {
//   return (
//     <html lang="en" className={font.className}>
//       <body>{children}</body>
//     </html>
//   )
// }
